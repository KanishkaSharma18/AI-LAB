import heapq

moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def find_position(state, value):
    for i in range(3):
        for j in range(3):
            if state[i][j] == value:
                return i, j

def manhattan_distance(state, goal_state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:  # skip blank
                goal_i, goal_j = find_position(goal_state, val)
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def state_to_tuple(state):
    return tuple([tuple(row) for row in state])

def print_state(state):
    for row in state:
        print(row)
    print()

def get_neighbors(state):
    neighbors = []
    x, y = find_position(state, 0)
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def a_star(initial_state, goal_state):
    pq = []
    visited = set()

    g = 0
    h = manhattan_distance(initial_state, goal_state)
    f = g + h
    heapq.heappush(pq, (f, g, initial_state))

    while pq:
        f, g, state = heapq.heappop(pq)
        state_tuple = state_to_tuple(state)

        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        print(f"Expanding state with f(n)={f}, g(n)={g}, h(n)={f-g}")
        print_state(state)

        if state == goal_state:
            print("ðŸŽ¯ Goal Reached!")
            return

        for neighbor in get_neighbors(state):
            h = manhattan_distance(neighbor, goal_state)
            new_g = g + 1
            new_f = new_g + h
            heapq.heappush(pq, (new_f, new_g, neighbor))

def take_input():
    print("Enter initial state (3 rows, use 0 for blank):")
    initial_state = []
    for i in range(3):
        row = list(map(int, input().split()))
        initial_state.append(row)

    print("Enter goal state (3 rows, use 0 for blank):")
    goal_state = []
    for i in range(3):
        row = list(map(int, input().split()))
        goal_state.append(row)

    return initial_state, goal_state

if __name__ == "__main__":
    initial_state, goal_state = take_input()
    a_star(initial_state, goal_state)
